

%{
    #import "ParserConsumer.h"

    #import "Parser.h"
    #import "Lexer.h"

    #import "MixCommands.h"

    void yyerror(void *scanner, id <ParserConsumer> consumer, const char *msg);
%}

  // output files are set via command-line params in Makefile
  //%output  "Parser/Generated Code/parser.m"
  //%defines "Parser/Generated Code/parser.h"

%define api.pure full
%define parse.error verbose

%lex-param { void *scanner }

%parse-param { void *scanner }
%parse-param { id <ParserConsumer> consumer }

%union {
    char *stringValue;
    int numericValue;
}

%token <stringValue> Token_String
%token <numericValue> Token_Number
%token <numericValue>  Token_KeyCode
%token <stringValue>  Token_Label

%token <numericValue> NOP ADD  SUB  MUL  DIV  HLT  NUM CHR
%token <numericValue> SLA  SRA  SLAX  SRAX  SLC  SRC  MOVE
%token <numericValue>  LDA  LD1 LD2  LD3  LD4  LD5  LD6  LDX
%token <numericValue>  LDAN  LD1N  LD2N  LD3N  LD4N  LD5N  LD6N  LDXN
%token <numericValue>  STA  ST1  ST2  ST3  ST4  ST5  ST6  STX
%token <numericValue>  STJ STZ IOC IN  OUT  JMP
%token <numericValue>  JSJ JOV JNOV JL JE  JG  JGE  JNE  JLE
%token <numericValue>  JAN  J1N  J2N  J3N  J4N  J5N J6N JXN
%token <numericValue>  JAZ J1Z J2Z J3Z J4Z J5Z J6Z JXZ
%token <numericValue>  JAP J1P J2P J3P J4P J5P J6P JXP
%token <numericValue>  JANN J1NN J2NN J3NN J4NN J5NN J6NN JXNN
%token <numericValue>  JANZ J1NZ J2NZ J3NZ J4NZ J5NZ J6NZ JXNZ
%token <numericValue>  JANP J1NP J2NP J3NP J4NP J5NP J6NP JXNP
%token <numericValue> INCA INC1 INC2 INC3 INC4 INC5 INC6 INCX
%token <numericValue> DECA DEC1 DEC2 DEC3 DEC4 DEC5 DEC6 DECX
%token <numericValue>  ENTA ENT1 ENT2 ENT3 ENT4 ENT5 ENT6 ENTX
%token <numericValue>  ENNA ENN1 ENN2 ENN3 ENN4 ENN5 ENN6 ENNX
%token <numericValue>  CMPA CMP1 CMP2 CMP3 CMP4 CMP5 CMP6 CMP7

%%

/* http://www.tldp.org/HOWTO/Lex-YACC-HOWTO-6.html 6.2 Recursion: 'right is wrong' */
tokens: /* empty */
      | tokens token

token:
    line |
    Token_String {
        printf("[Parser, string] %s\n", $1);

        [consumer parserDidParseString:$1];

        free($1);
    }


line_simple:   MNEMONIC
     |   MNEMONIC OPERAND
     |   MNEMONIC OPERAND ',' OPERAND

line:   line_simple
    |   LABEL  line_simple
    |   line_simple comment
    |   LABEL  comment
    |   LABEL line_simple comment
    |   comment

comment:  '%' line {
    
}

LABEL:  Token_Label {
    

}

NUMBER:  Token_Number
{
    return $1;
}

STRING: Token_String
{
    return $1;
}

OPERAND:    NUMBER | LABEL | STRING {
    return;
}




MNEMONIC:  NOP | ADD | SUB | MUL | DIV | HLT | NUM| CHR
          | SLA | SRA | SLAX | SRAX | SLC | SRC | MOVE
          | LDA | LD1 | LD2 | LD3 | LD4 | LD5 | LD6 | LDX
          | LDAN | LD1N | LD2N | LD3N | LD4N | LD5N | LD6N | LDXN
          | STA | ST1 | ST2 | ST3 | ST4 | ST5 | ST6 | STX
          | STJ | STZ | IOC | IN | OUT  | JMP |
          | JSJ | JOV | JNOV | JL | JE | JG | JGE | JNE | JLE
          | JAN | J1N | J2N | J3N | J4N | J5N | J6N | JXN
          | JAZ | J1Z | J2Z | J3Z | J4Z | J5Z | J6Z | JXZ
          | JAP | J1P | J2P | J3P | J4P | J5P | J6P | JXP
          | JANN | J1NN | J2NN | J3NN | J4NN | J5NN | J6NN | JXNN
          | JANZ | J1NZ | J2NZ | J3NZ | J4NZ | J5NZ | J6NZ | JXNZ
          | JANP | J1NP | J2NP | J3NP | J4NP | J5NP | J6NP | JXNP
          | INCA | INC1 | INC2 | INC3 | INC4 | INC5 | INC6 | INCX
          | DECA | DEC1 | DEC2 | DEC3 | DEC4 | DEC5 | DEC6 | DECX
          | ENTA | ENT1 | ENT2 | ENT3 | ENT4 | ENT5 | ENT6 | ENTX
          | ENNA | ENN1 | ENN2 | ENN3 | ENN4 | ENN5 | ENN6 | ENNX
          | CMPA | CMP1 | CMP2 | CMP3 | CMP4 | CMP5 | CMP6 | CMP7  {

              printf("[Parser, keycode] %s\n", $1);
              return $1;
          }



%%
